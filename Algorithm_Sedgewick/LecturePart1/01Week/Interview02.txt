Q1
3-SUM in quadratic time.
Design an algorithm for the 3-SUM problem that takes time proportional to n^2 in the worst case.
You may assume that you can sort the n integers in time proportional to n^2 or better.

sol1)
int N = 10;
int[] a = new int[N];
for(int i = 0; i < N; ++i){
	int x = - a[x];
	int lo = 0;
	int hi = N - 1;
	
	while(lo <= hi) { // traverse a
		if (a[lo] + a[hi] > x)
			hi--;
		else if (a[lo] + a[hi] < x)
			lo++;
		else
			count++; 
	}	
}

Q2
Search in a bitonic array.
An array is bitonic if it is comprised of an increasing sequence of integers followed immediately by a decreasing sequence of integers.
Write a program that, given a bitonic array of nn distinct integer values, determines whether a given integer is in the array.
Standard version: Use ~ 3lgn compares in the worst case.
Signing bonus: Use ~ 2lgn compares in the worst case
(and prove that no algorithm can guarantee to perform fewer than ~ 2lgn compares in the worst case).

sol2-1)
int N = 10;
int[] a = new int[N];
int key;

// Find Maximum integer - lg(N)
int ptr1 = 0;
int ptr2 = N - 1;
int maxIdx;
while(ptr1 <= ptr2) {
	int mid = (ptr1 + ptr2) / 2;
	if (a[mid + 1] > a[mid]) // mid is in incresing part
		ptr1 = mid + 1;
	else if (a[mid + 1] < a[mid]) // mid is in decresing part
		ptr2 = mid - 1;
}

if (a[ptr1] > a[ptr2])
	maxIdx = ptr1;
else
	maxIdx = ptr2;
	
// increasing part - binary search - lg(N)
ptr1 = 0;
ptr2 = maxIdx;
while(ptr1 <= ptr2) {
	int mid = (ptr1 + ptr2) / 2;
	if (a[mid] > key)
		ptr2 = mid - 1;
	else if (a[mid] < key)
		ptr1 = mid + 1;
	else
		return mid;
}

// decresing part - binary search - lg(N)
prt1 = maxIdx;
ptr2 = N - 1;
while(ptr1 <= ptr2) {
	int mid = (ptr1 + ptr2) / 2;
	if (a[mid] > key)
		ptr1 = mid + 1;
	else if (a[mid] < key)
		ptr2 = mid - 1;
	else
		return mid;
}
return -1;

sol2-2)
// maximum index를 찾을 필요가 없다.
int N = 10;
int[] a = new int[N];
int key;

public static int binarySearch(int[] a, int start, int end, int key, boolean inc) {
	// inc == true면 increasing, inc == false면 decreasing
	int ptr1 = start;
	int ptr2 = end;
	
	while(ptr1 <= ptr2) {
		int mid = (ptr1 + ptr2) / 2;
		if (inc ? (a[mid] > key) : (a[mid] < key))
			ptr2 = mid - 1;
		else if (inc ? (a[mid] < key) : (a[mid] > key))
			ptr1 = mid + 1;
		else
			return mid;
	}
	return -1;
}

public static int bitonicSearch(int[] a, int start, int end, int key) {
	int result = -1;
	int mid = (start + end) / 2;
	
	if (a[mid] == key) return mid;
	
	if (end - start <= 1) {
		return (a[start] == key) ? start : ((a[end] == key) ? end : -1);
	}
	
	
	if (a[mid + 1] > a[mid]) { // mid is in increasing part
		if (a[mid] > key) {
			result = binarySearch(a, start, mid, key, true);
			if (result != -1)
				return result;
		} else
			bitonicSearch(a, mid, end, key);
	} else if (a[mid + 1] < a[mid]) { // mid is in decreasing part
		if (a[mid] > key) {
			result = binarySearch(a, mid, end, key, false);
			if (result != -1)
				return result;
		} else
			bitonicSearch(a, start, mid, key);
	}
}

proof
step0) In sorted array, optimal search algorithm has ~lgn complexity.
step1) Bitonic array has two sorted-part, therefore optimal search algorithm has ~2lgn
step0: By binary search algorithm, search for sorted algorithm has upper bound by ~lgn
Now it is suffice to show that it has lower bound by ~lgn
Consider decision tree for any comparison-based search algorithm.
'Comparison based' means that decision tree has three edge at most.(<, =, >, i.e. ternary tree.)
But only use two inequality(<=, >), it is also possible to make a decision tree.
(This process allow you to raised lower bound from log_3(n) to log_2(n).)
And leaf nodes are index of array or -1.(return value)
Therefore minimum height of this tree is lg(n) + 1 ~ lg(n)
It means that no algorithm can gurantee that fewer than ~ lg(n) compares in worst case.
step1: It's not intuitive, but if the combination of the two optimal algorithms becomes the optimal algorithm again, it holds.

Q3
Egg drop.
Suppose that you have an n-story building (with floors 1 through n) and plenty of eggs.
An egg breaks if it is dropped from floor T or higher and does not break otherwise.
Your goal is to devise a strategy to determine the value of  T given the following limitations on the number of eggs and tosses:

Version 0: 1 egg, ≤ T tosses.
Version 1: ~ 1lgn eggs and ~ 1lgn tosses.
Version 2: ~ lgT eggs and ~ 2lgT tosses.
Version 3: 2 eggs and ~ 2sqrt(n) tosses.
Version 4: 2 eggs and ≤c sqrt(T) tosses for some fixed constant c.

sol)
Version 0: Throw 1 egg from the 1st to the T floor in order until cracked.
Version 1: Use Binary Search. 

Version 2: Throw eggs on the 1st, 2nd , 4th, 8th, ... , 2^(k-1)th, 2^k th floor until the eggs are broken.
It means that 2^(k-1) < T <= 2^k. In this process, 1 eggs broken, lg(T) tosses.
Binary search from 2^(k-1) floor to 2^k. The length of searching is 2^k - 2^(k-1) = 2^(k-1) < T
By searching binary, additionally lg(T) eggs broken, lg(T) tosses.
Therefore we can find the way to use ~lg(T) eggs, ~2lg(T) tosses

Version 3: Throw eggs on the sqrt(n)th, 2sqrt(n)th, ... k sqrt(n)th floor until the eggs are broken.
the number of toss is n / sqrt(n) = sqrt(n) at most.(T/sqrt(n)) In this process, 1 eggs broken.
linear searching (k-1)sqrt(n) ~ k sqrt(n). the number of toss is k sqrt(n) - (k-1)sqrt(n) = sqrt(n) at most by linear search.
Therefore use 2 eggs, 2sqrt(n) tosses.

Version 4: Throw 1st, 3rd, 6th, 10th, ... floor until the eggs are broken.
we can find the integer k such that k(k+1)/2 < T <= (k+1)(k+2)/2 by using 1 egg.(k toss)
k^2 < k(k+1) < 2T implies k <= sqrt(2T). Similary k > sqrt(2T) - 1
Linear search k(k+1)/2 ~ (k+1)(k+2)/2 floor. the number of toss is (k+1)(k+2)/2 - k(k+1)/2 = k+1 by linear search.
Therefore use 2 eggs, ~ 2sqrt(2T) tosses.